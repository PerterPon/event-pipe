// Generated by CoffeeScript 1.4.0
var EventPipe, events,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

events = require("events");

EventPipe = (function(_super) {

  __extends(EventPipe, _super);

  function EventPipe() {
    var cbs,
      _this = this;
    cbs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.list = [];
    this.pointer = 0;
    this.flag = 0;
    this.container = (function() {
      var args, cb, cb1, type, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.stopped) {
        this.emit('stopped', this.container);
        return;
      }
      if (this.pointer >= this.list.length) {
        this.emit('drain', this.container);
        return;
      }
      if (--this.flag > 0) {
        return;
      }
      _ref = this.list[this.pointer], type = _ref[0], cb = _ref[1];
      this.pointer++;
      if (type === 'seq') {
        cb.apply(this.container, args);
      } else if (type === 'par') {
        this.flag = cb.length;
        for (_i = 0, _len = cb.length; _i < _len; _i++) {
          cb1 = cb[_i];
          cb1.apply(this.container, args);
        }
      }
    }).bind(this);
    this.container.__stop = function() {
      return _this.stop();
    };
    if (cbs.length === 0) {
      return;
    }
    this.add.apply(this, cbs);
  }

  EventPipe.prototype.add = function() {
    var cb, cbs, _i, _len;
    cbs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
      cb = cbs[_i];
      if (typeof cb === 'function') {
        this.seq(cb);
      } else if (typeof cb === 'object' && cb instanceof Array) {
        this.par.apply(this, cb);
      }
    }
    return this;
  };

  EventPipe.prototype.seq = function() {
    var cb, cbs, _i, _len;
    cbs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
      cb = cbs[_i];
      this.list.push(['seq', cb]);
    }
    return this;
  };

  EventPipe.prototype.par = function() {
    var cbs;
    cbs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.list.push(['par', cbs]);
    return this;
  };

  EventPipe.prototype.run = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.container.apply(this, args);
    return this;
  };

  EventPipe.prototype.stop = function() {
    this.stopped = true;
    this.emit('stop');
    return this;
  };

  return EventPipe;

})(events.EventEmitter);

module.exports = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(EventPipe, args, function(){});
};
